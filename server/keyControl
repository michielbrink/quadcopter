#! /usr/bin/python2.7
#! /usr/bin/sudo /usr/bin/python2.7
import time
import math
import stm
import curses

class PropertyWindow:
    HEIGHT = 11
    WIDTH  = 40
    def __init__(self, x, y, screen, dev):
        self.stm = dev
        self.area = screen.derwin(PropertyWindow.HEIGHT, PropertyWindow.WIDTH, y, x)
        self.area.border(0)
        self.area.addstr(0, 2, "[ Properties ]")
        self.proparea = self.area.derwin(PropertyWindow.HEIGHT - 2, PropertyWindow.WIDTH - 2, 1, 1)
        self.draw_area()

    def refresh(self):
        self.draw_area()

    def draw_area(self):
        acc = self.stm.acceleration
        mag = self.stm.magfield
        gyro = self.stm.angularspeed
        motors = self.stm.motors

        self.proparea.clear()
        self.proparea.addstr(0, 0, "Acceleration" )
        self.proparea.addstr(1, 1, "x {:>9.2f}".format(acc[1]))
        self.proparea.addstr(2, 1, "y {:>9.2f}".format(acc[2]))
        self.proparea.addstr(3, 1, "z {:>9.2f}".format(acc[3]))
        self.proparea.addstr(4, 0, "Magn.Field" )
        self.proparea.addstr(5, 1, "x {:>9.2f}".format(mag[1]))
        self.proparea.addstr(6, 1, "y {:>9.2f}".format(mag[2]))
        self.proparea.addstr(7, 1, "z {:>9.2f}".format(mag[3]))
        self.proparea.addstr(0, 20, "Gyroscope" )
        self.proparea.addstr(1, 21, "x {:>9.5f}".format(gyro[1]))
        self.proparea.addstr(2, 21, "y {:>9.5f}".format(gyro[2]))
        self.proparea.addstr(3, 21, "z {:>9.5f}".format(gyro[3]))
        self.proparea.addstr(4, 20, "Motors" )
        self.proparea.addstr(5, 21, "0 {:>3.0f}%".format(motors[0]))
        self.proparea.addstr(5, 30, "1 {:>3.0f}%".format(motors[1]))
        self.proparea.addstr(7, 21, "2 {:>3.0f}%".format(motors[2]))
        self.proparea.addstr(7, 30, "3 {:>3.0f}%".format(motors[3]))
        self.proparea.refresh()

class AnglesWindow:
    HEIGHT = 7
    WIDTH  = 40
    def __init__(self, x, y, screen, dev):
        self.stm = dev
        self.area = screen.derwin(AnglesWindow.HEIGHT, AnglesWindow.WIDTH, y, x)
        self.area.border(0)
        self.area.addstr(0, 2, "[ Angles ]")
        self.proparea = self.area.derwin(AnglesWindow.HEIGHT - 2, AnglesWindow.WIDTH - 2, 1, 1)
        self.draw_area()

    def refresh(self):
        self.draw_area()

    def draw_area(self):
        angles        = self.stm.angle
        target_angles = self.stm.target_angles

        self.proparea.clear()
        self.proparea.addstr(0, 0, "Angle" )
        self.proparea.addstr(1, 1, "x {:>9.2f}".format(angles[1]))
        self.proparea.addstr(2, 1, "y {:>9.5f}".format(angles[2]))
        self.proparea.addstr(3, 1, "z {:>9.5f}".format(angles[3]))
        self.proparea.addstr(4, 1, "t {:>9.2f}".format(angles[0]))
        self.proparea.addstr(0, 20, "Target" )
        self.proparea.addstr(1, 21, "x {:>9.5f}".format(target_angles[1]))
        self.proparea.addstr(2, 21, "y {:>9.5f}".format(target_angles[2]))
        self.proparea.addstr(3, 21, "z {:>9.5f}".format(target_angles[3]))
        self.proparea.refresh()

class TextWindow:
    HEIGHT = 10
    WIDTH  = 30

    def __init__(self, x, y, screen, title, text = ''):
        self.area = screen.derwin(TextWindow.HEIGHT, TextWindow.WIDTH, y, x)
        self.area.border(0)
        self.area.addstr(0, 2, "[ %s ]" % title[0:TextWindow.WIDTH - 5])
        self.textarea = self.area.derwin(TextWindow.HEIGHT - 2, TextWindow.WIDTH - 2, 1, 1)
        self.text = text
        self.draw_area()
    
    def draw_area(self):
        self.textarea.clear()
        i = 0
        for line in self.text.split('\n'):
            if i < TextWindow.HEIGHT:
                self.textarea.addstr(i, 0, line)
            i += 1
        self.textarea.refresh()

    def refresh(self):
        self.draw_area()


class CopterScreen:
    def __init__(self, stm_dev):
        self.stm = stm_dev

        # Initialize screen
        self.screen = curses.initscr()
        curses.noecho()
        self.screen.keypad(1)
        self.screen.nodelay(1)
        self.createMain()
        self.text = TextWindow(5, 10+PropertyWindow.HEIGHT+AnglesWindow.HEIGHT, self.screen, 'DEBUG', '')
        self.subwins = [
            PropertyWindow(5,2,self.screen,self.stm),
            AnglesWindow(5, 5 + PropertyWindow.HEIGHT, self.screen, self.stm),
            self.text,
        ]
        self.screen.refresh()

    def createMain(self):
        self.screen.clear()
        my, mx = self.screen.getmaxyx()
        self.screen.border(0)
        self.screen.addstr(0, 2, "[ QuadCopter Control ]")

    def refresh(self):
        [x.refresh() for x in self.subwins]
        self.screen.refresh()

    def restoreScreen(self):
        curses.nocbreak()
        self.screen.keypad(0)
        curses.echo()
        curses.endwin()


    def __del__(self):
        self.restoreScreen()
        
with stm.stm_device() as stm:
    try:
        c = CopterScreen(stm)
        stm.enable_motors()
        sm = 0
        stm.set_motors([sm, sm, sm, sm])
        active = True
        while active:
            c.refresh()
            char = c.screen.getch()
            if char == curses.KEY_UP:
                c.text.text = 'UP : %i' % sm
                sm = min(100, sm + 5)
                stm.set_motors([sm, sm, sm, sm])
            elif char == curses.KEY_DOWN:
                c.text.text = 'DOWN : %i' % sm
                sm = min(100, sm - 5)
                stm.set_motors([sm, sm, sm, sm])
            elif char == ord('o'):
                c.text.text = 'DOWN : %i' % sm
                sm = min(100, sm + 1)
                stm.set_motors([sm, sm, sm, sm])
            elif char == ord('l'):
                c.text.text = 'DOWN : %i' % sm
                sm = min(100, sm - 1)
                stm.set_motors([sm, sm, sm, sm])
            elif char == ord(' '):
                sm = 0
                stm.set_motors([sm, sm, sm, sm])
            elif char == ord('q'):
                active = False
            
            time.sleep(.3)
    except:
        curses.nocbreak()
        curses.echo()
        curses.endwin()
        raise
    else:
        c.restoreScreen()
